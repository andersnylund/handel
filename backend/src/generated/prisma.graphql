# source: http://localhost:4466
# timestamp: Thu Apr 18 2019 22:10:22 GMT+0300 (Eastern European Summer Time)

type AggregateDeal {
  count: Int!
}

type AggregateDealParticipant {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Deal implements Node {
  id: ID!
  dealParticipants(where: DealParticipantWhereInput, orderBy: DealParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DealParticipant!]
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum DealApproval {
  ACCEPT
  REJECT
}

"""A connection to a list of items."""
type DealConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DealEdge]!
  aggregate: AggregateDeal!
}

input DealCreateInput {
  id: ID
  dealParticipants: DealParticipantCreateManyWithoutDealInput
  items: ItemCreateManyInput
}

input DealCreateOneWithoutDealParticipantsInput {
  create: DealCreateWithoutDealParticipantsInput
  connect: DealWhereUniqueInput
}

input DealCreateWithoutDealParticipantsInput {
  id: ID
  items: ItemCreateManyInput
}

"""An edge in a connection."""
type DealEdge {
  """The item at the end of the edge."""
  node: Deal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DealOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DealParticipant implements Node {
  id: ID!
  deal: Deal
  participant: User
  approval: DealApproval!
  lastSeen: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DealParticipantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DealParticipantEdge]!
  aggregate: AggregateDealParticipant!
}

input DealParticipantCreateInput {
  id: ID
  approval: DealApproval!
  lastSeen: DateTime!
  deal: DealCreateOneWithoutDealParticipantsInput
  participant: UserCreateOneWithoutDealParticipationsInput
}

input DealParticipantCreateManyWithoutDealInput {
  create: [DealParticipantCreateWithoutDealInput!]
  connect: [DealParticipantWhereUniqueInput!]
}

input DealParticipantCreateManyWithoutParticipantInput {
  create: [DealParticipantCreateWithoutParticipantInput!]
  connect: [DealParticipantWhereUniqueInput!]
}

input DealParticipantCreateWithoutDealInput {
  id: ID
  approval: DealApproval!
  lastSeen: DateTime!
  participant: UserCreateOneWithoutDealParticipationsInput
}

input DealParticipantCreateWithoutParticipantInput {
  id: ID
  approval: DealApproval!
  lastSeen: DateTime!
  deal: DealCreateOneWithoutDealParticipantsInput
}

"""An edge in a connection."""
type DealParticipantEdge {
  """The item at the end of the edge."""
  node: DealParticipant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DealParticipantOrderByInput {
  id_ASC
  id_DESC
  approval_ASC
  approval_DESC
  lastSeen_ASC
  lastSeen_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DealParticipantPreviousValues {
  id: ID!
  approval: DealApproval!
  lastSeen: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DealParticipantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DealParticipantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealParticipantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealParticipantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approval: DealApproval

  """All values that are not equal to given value."""
  approval_not: DealApproval

  """All values that are contained in given list."""
  approval_in: [DealApproval!]

  """All values that are not contained in given list."""
  approval_not_in: [DealApproval!]
  lastSeen: DateTime

  """All values that are not equal to given value."""
  lastSeen_not: DateTime

  """All values that are contained in given list."""
  lastSeen_in: [DateTime!]

  """All values that are not contained in given list."""
  lastSeen_not_in: [DateTime!]

  """All values less than the given value."""
  lastSeen_lt: DateTime

  """All values less than or equal the given value."""
  lastSeen_lte: DateTime

  """All values greater than the given value."""
  lastSeen_gt: DateTime

  """All values greater than or equal the given value."""
  lastSeen_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DealParticipantSubscriptionPayload {
  mutation: MutationType!
  node: DealParticipant
  updatedFields: [String!]
  previousValues: DealParticipantPreviousValues
}

input DealParticipantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DealParticipantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealParticipantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealParticipantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DealParticipantWhereInput
}

input DealParticipantUpdateInput {
  approval: DealApproval
  lastSeen: DateTime
  deal: DealUpdateOneWithoutDealParticipantsInput
  participant: UserUpdateOneWithoutDealParticipationsInput
}

input DealParticipantUpdateManyDataInput {
  approval: DealApproval
  lastSeen: DateTime
}

input DealParticipantUpdateManyMutationInput {
  approval: DealApproval
  lastSeen: DateTime
}

input DealParticipantUpdateManyWithoutDealInput {
  create: [DealParticipantCreateWithoutDealInput!]
  connect: [DealParticipantWhereUniqueInput!]
  set: [DealParticipantWhereUniqueInput!]
  disconnect: [DealParticipantWhereUniqueInput!]
  delete: [DealParticipantWhereUniqueInput!]
  update: [DealParticipantUpdateWithWhereUniqueWithoutDealInput!]
  updateMany: [DealParticipantUpdateManyWithWhereNestedInput!]
  deleteMany: [DealParticipantScalarWhereInput!]
  upsert: [DealParticipantUpsertWithWhereUniqueWithoutDealInput!]
}

input DealParticipantUpdateManyWithoutParticipantInput {
  create: [DealParticipantCreateWithoutParticipantInput!]
  connect: [DealParticipantWhereUniqueInput!]
  set: [DealParticipantWhereUniqueInput!]
  disconnect: [DealParticipantWhereUniqueInput!]
  delete: [DealParticipantWhereUniqueInput!]
  update: [DealParticipantUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [DealParticipantUpdateManyWithWhereNestedInput!]
  deleteMany: [DealParticipantScalarWhereInput!]
  upsert: [DealParticipantUpsertWithWhereUniqueWithoutParticipantInput!]
}

input DealParticipantUpdateManyWithWhereNestedInput {
  where: DealParticipantScalarWhereInput!
  data: DealParticipantUpdateManyDataInput!
}

input DealParticipantUpdateWithoutDealDataInput {
  approval: DealApproval
  lastSeen: DateTime
  participant: UserUpdateOneWithoutDealParticipationsInput
}

input DealParticipantUpdateWithoutParticipantDataInput {
  approval: DealApproval
  lastSeen: DateTime
  deal: DealUpdateOneWithoutDealParticipantsInput
}

input DealParticipantUpdateWithWhereUniqueWithoutDealInput {
  where: DealParticipantWhereUniqueInput!
  data: DealParticipantUpdateWithoutDealDataInput!
}

input DealParticipantUpdateWithWhereUniqueWithoutParticipantInput {
  where: DealParticipantWhereUniqueInput!
  data: DealParticipantUpdateWithoutParticipantDataInput!
}

input DealParticipantUpsertWithWhereUniqueWithoutDealInput {
  where: DealParticipantWhereUniqueInput!
  update: DealParticipantUpdateWithoutDealDataInput!
  create: DealParticipantCreateWithoutDealInput!
}

input DealParticipantUpsertWithWhereUniqueWithoutParticipantInput {
  where: DealParticipantWhereUniqueInput!
  update: DealParticipantUpdateWithoutParticipantDataInput!
  create: DealParticipantCreateWithoutParticipantInput!
}

input DealParticipantWhereInput {
  """Logical AND on all given filters."""
  AND: [DealParticipantWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealParticipantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealParticipantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approval: DealApproval

  """All values that are not equal to given value."""
  approval_not: DealApproval

  """All values that are contained in given list."""
  approval_in: [DealApproval!]

  """All values that are not contained in given list."""
  approval_not_in: [DealApproval!]
  lastSeen: DateTime

  """All values that are not equal to given value."""
  lastSeen_not: DateTime

  """All values that are contained in given list."""
  lastSeen_in: [DateTime!]

  """All values that are not contained in given list."""
  lastSeen_not_in: [DateTime!]

  """All values less than the given value."""
  lastSeen_lt: DateTime

  """All values less than or equal the given value."""
  lastSeen_lte: DateTime

  """All values greater than the given value."""
  lastSeen_gt: DateTime

  """All values greater than or equal the given value."""
  lastSeen_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  deal: DealWhereInput
  participant: UserWhereInput
}

input DealParticipantWhereUniqueInput {
  id: ID
}

type DealPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DealSubscriptionPayload {
  mutation: MutationType!
  node: Deal
  updatedFields: [String!]
  previousValues: DealPreviousValues
}

input DealSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DealSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DealWhereInput
}

input DealUpdateInput {
  dealParticipants: DealParticipantUpdateManyWithoutDealInput
  items: ItemUpdateManyInput
}

input DealUpdateOneWithoutDealParticipantsInput {
  create: DealCreateWithoutDealParticipantsInput
  connect: DealWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DealUpdateWithoutDealParticipantsDataInput
  upsert: DealUpsertWithoutDealParticipantsInput
}

input DealUpdateWithoutDealParticipantsDataInput {
  items: ItemUpdateManyInput
}

input DealUpsertWithoutDealParticipantsInput {
  update: DealUpdateWithoutDealParticipantsDataInput!
  create: DealCreateWithoutDealParticipantsInput!
}

input DealWhereInput {
  """Logical AND on all given filters."""
  AND: [DealWhereInput!]

  """Logical OR on all given filters."""
  OR: [DealWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DealWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  dealParticipants_every: DealParticipantWhereInput
  dealParticipants_some: DealParticipantWhereInput
  dealParticipants_none: DealParticipantWhereInput
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
}

input DealWhereUniqueInput {
  id: ID
}

type Item implements Node {
  id: ID!
  title: String!
  description: String!
  price: Int!
  image: String!
  largeImage: String!
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  title: String!
  description: String!
  price: Int!
  image: String!
  largeImage: String!
  user: UserCreateOneWithoutItemsInput
}

input ItemCreateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateManyWithoutUserInput {
  create: [ItemCreateWithoutUserInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutUserInput {
  id: ID
  title: String!
  description: String!
  price: Int!
  image: String!
  largeImage: String!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: Int!
  image: String!
  largeImage: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateDataInput {
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
  user: UserUpdateOneWithoutItemsInput
}

input ItemUpdateInput {
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
  user: UserUpdateOneWithoutItemsInput
}

input ItemUpdateManyDataInput {
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
}

input ItemUpdateManyInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueNestedInput!]
}

input ItemUpdateManyMutationInput {
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
}

input ItemUpdateManyWithoutUserInput {
  create: [ItemCreateWithoutUserInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutUserInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithoutUserDataInput {
  title: String
  description: String
  price: Int
  image: String
  largeImage: String
}

input ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateDataInput!
}

input ItemUpdateWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutUserDataInput!
}

input ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateDataInput!
  create: ItemCreateInput!
}

input ItemUpsertWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutUserDataInput!
  create: ItemCreateWithoutUserInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createDeal(data: DealCreateInput!): Deal!
  createDealParticipant(data: DealParticipantCreateInput!): DealParticipant!
  createItem(data: ItemCreateInput!): Item!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateDeal(data: DealUpdateInput!, where: DealWhereUniqueInput!): Deal
  updateDealParticipant(data: DealParticipantUpdateInput!, where: DealParticipantWhereUniqueInput!): DealParticipant
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  deleteUser(where: UserWhereUniqueInput!): User
  deleteDeal(where: DealWhereUniqueInput!): Deal
  deleteDealParticipant(where: DealParticipantWhereUniqueInput!): DealParticipant
  deleteItem(where: ItemWhereUniqueInput!): Item
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertDeal(where: DealWhereUniqueInput!, create: DealCreateInput!, update: DealUpdateInput!): Deal!
  upsertDealParticipant(where: DealParticipantWhereUniqueInput!, create: DealParticipantCreateInput!, update: DealParticipantUpdateInput!): DealParticipant!
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyDealParticipants(data: DealParticipantUpdateManyMutationInput!, where: DealParticipantWhereInput): BatchPayload!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyDeals(where: DealWhereInput): BatchPayload!
  deleteManyDealParticipants(where: DealParticipantWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal]!
  dealParticipants(where: DealParticipantWhereInput, orderBy: DealParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DealParticipant]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  user(where: UserWhereUniqueInput!): User
  deal(where: DealWhereUniqueInput!): Deal
  dealParticipant(where: DealParticipantWhereUniqueInput!): DealParticipant
  item(where: ItemWhereUniqueInput!): Item
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  dealsConnection(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealConnection!
  dealParticipantsConnection(where: DealParticipantWhereInput, orderBy: DealParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealParticipantConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  deal(where: DealSubscriptionWhereInput): DealSubscriptionPayload
  dealParticipant(where: DealParticipantSubscriptionWhereInput): DealParticipantSubscriptionPayload
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
}

type User implements Node {
  id: ID!
  sub: String!
  email: String!
  emailVerified: Boolean!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  dealParticipations(where: DealParticipantWhereInput, orderBy: DealParticipantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DealParticipant!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  sub: String!
  email: String!
  emailVerified: Boolean
  items: ItemCreateManyWithoutUserInput
  dealParticipations: DealParticipantCreateManyWithoutParticipantInput
}

input UserCreateOneWithoutDealParticipationsInput {
  create: UserCreateWithoutDealParticipationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutItemsInput {
  create: UserCreateWithoutItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDealParticipationsInput {
  id: ID
  sub: String!
  email: String!
  emailVerified: Boolean
  items: ItemCreateManyWithoutUserInput
}

input UserCreateWithoutItemsInput {
  id: ID
  sub: String!
  email: String!
  emailVerified: Boolean
  dealParticipations: DealParticipantCreateManyWithoutParticipantInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  sub_ASC
  sub_DESC
  email_ASC
  email_DESC
  emailVerified_ASC
  emailVerified_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  sub: String!
  email: String!
  emailVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  sub: String
  email: String
  emailVerified: Boolean
  items: ItemUpdateManyWithoutUserInput
  dealParticipations: DealParticipantUpdateManyWithoutParticipantInput
}

input UserUpdateManyMutationInput {
  sub: String
  email: String
  emailVerified: Boolean
}

input UserUpdateOneWithoutDealParticipationsInput {
  create: UserCreateWithoutDealParticipationsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDealParticipationsDataInput
  upsert: UserUpsertWithoutDealParticipationsInput
}

input UserUpdateOneWithoutItemsInput {
  create: UserCreateWithoutItemsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutItemsDataInput
  upsert: UserUpsertWithoutItemsInput
}

input UserUpdateWithoutDealParticipationsDataInput {
  sub: String
  email: String
  emailVerified: Boolean
  items: ItemUpdateManyWithoutUserInput
}

input UserUpdateWithoutItemsDataInput {
  sub: String
  email: String
  emailVerified: Boolean
  dealParticipations: DealParticipantUpdateManyWithoutParticipantInput
}

input UserUpsertWithoutDealParticipationsInput {
  update: UserUpdateWithoutDealParticipationsDataInput!
  create: UserCreateWithoutDealParticipationsInput!
}

input UserUpsertWithoutItemsInput {
  update: UserUpdateWithoutItemsDataInput!
  create: UserCreateWithoutItemsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sub: String

  """All values that are not equal to given value."""
  sub_not: String

  """All values that are contained in given list."""
  sub_in: [String!]

  """All values that are not contained in given list."""
  sub_not_in: [String!]

  """All values less than the given value."""
  sub_lt: String

  """All values less than or equal the given value."""
  sub_lte: String

  """All values greater than the given value."""
  sub_gt: String

  """All values greater than or equal the given value."""
  sub_gte: String

  """All values containing the given string."""
  sub_contains: String

  """All values not containing the given string."""
  sub_not_contains: String

  """All values starting with the given string."""
  sub_starts_with: String

  """All values not starting with the given string."""
  sub_not_starts_with: String

  """All values ending with the given string."""
  sub_ends_with: String

  """All values not ending with the given string."""
  sub_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailVerified: Boolean

  """All values that are not equal to given value."""
  emailVerified_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  dealParticipations_every: DealParticipantWhereInput
  dealParticipations_some: DealParticipantWhereInput
  dealParticipations_none: DealParticipantWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
