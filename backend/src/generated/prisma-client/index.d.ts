// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deal: (where?: DealWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  participant: (where?: ParticipantWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deal: (where: DealWhereUniqueInput) => DealPromise;
  deals: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deal>;
  dealsConnection: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DealConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemPromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  participant: (where: ParticipantWhereUniqueInput) => ParticipantPromise;
  participants: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Participant>;
  participantsConnection: (args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ParticipantConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeal: (data: DealCreateInput) => DealPromise;
  updateDeal: (args: {
    data: DealUpdateInput;
    where: DealWhereUniqueInput;
  }) => DealPromise;
  upsertDeal: (args: {
    where: DealWhereUniqueInput;
    create: DealCreateInput;
    update: DealUpdateInput;
  }) => DealPromise;
  deleteDeal: (where: DealWhereUniqueInput) => DealPromise;
  deleteManyDeals: (where?: DealWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createParticipant: (data: ParticipantCreateInput) => ParticipantPromise;
  updateParticipant: (args: {
    data: ParticipantUpdateInput;
    where: ParticipantWhereUniqueInput;
  }) => ParticipantPromise;
  updateManyParticipants: (args: {
    data: ParticipantUpdateManyMutationInput;
    where?: ParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertParticipant: (args: {
    where: ParticipantWhereUniqueInput;
    create: ParticipantCreateInput;
    update: ParticipantUpdateInput;
  }) => ParticipantPromise;
  deleteParticipant: (where: ParticipantWhereUniqueInput) => ParticipantPromise;
  deleteManyParticipants: (
    where?: ParticipantWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deal: (
    where?: DealSubscriptionWhereInput
  ) => DealSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  participant: (
    where?: ParticipantSubscriptionWhereInput
  ) => ParticipantSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DealApproval = "ACCEPT" | "REJECT" | "UNACKNOWLEDGED";

export type ParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "approval_ASC"
  | "approval_DESC"
  | "lastSeen_ASC"
  | "lastSeen_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DealOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sub_ASC"
  | "sub_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DealUpdateInput {
  participants?: ParticipantUpdateManyWithoutDealInput;
}

export type DealWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface UserCreateOneWithoutParticipationsInput {
  create?: UserCreateWithoutParticipationsInput;
  connect?: UserWhereUniqueInput;
}

export interface ParticipantUpdateWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput;
  data: ParticipantUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutParticipationsInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  items?: ItemCreateManyWithoutUserInput;
}

export interface UserUpdateOneWithoutParticipationsInput {
  create?: UserCreateWithoutParticipationsInput;
  update?: UserUpdateWithoutParticipationsDataInput;
  upsert?: UserUpsertWithoutParticipationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ItemCreateManyWithoutUserInput {
  create?: ItemCreateWithoutUserInput[] | ItemCreateWithoutUserInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
}

export interface ParticipantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ParticipantWhereInput;
  AND?: ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput;
  OR?: ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput;
  NOT?: ParticipantSubscriptionWhereInput[] | ParticipantSubscriptionWhereInput;
}

export interface ItemCreateWithoutUserInput {
  id?: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ItemWhereInput;
  AND?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  OR?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  NOT?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
}

export interface ItemCreateOneInput {
  create?: ItemCreateInput;
  connect?: ItemWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
}

export interface ItemCreateInput {
  id?: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  user?: UserCreateOneWithoutItemsInput;
}

export interface DealWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  participants_every?: ParticipantWhereInput;
  participants_some?: ParticipantWhereInput;
  participants_none?: ParticipantWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DealWhereInput[] | DealWhereInput;
  OR?: DealWhereInput[] | DealWhereInput;
  NOT?: DealWhereInput[] | DealWhereInput;
}

export interface UserCreateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface ParticipantUpdateManyMutationInput {
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface UserCreateWithoutItemsInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  participations?: ParticipantCreateManyWithoutUserInput;
}

export interface ParticipantCreateInput {
  id?: UUID;
  deal?: DealCreateOneWithoutParticipantsInput;
  user?: UserCreateOneWithoutParticipationsInput;
  item?: ItemCreateOneInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface ParticipantCreateManyWithoutUserInput {
  create?:
    | ParticipantCreateWithoutUserInput[]
    | ParticipantCreateWithoutUserInput;
  connect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
}

export interface ItemUpdateManyMutationInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface ParticipantCreateWithoutUserInput {
  id?: UUID;
  deal?: DealCreateOneWithoutParticipantsInput;
  item?: ItemCreateOneInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface ParticipantUpsertWithWhereUniqueWithoutDealInput {
  where: ParticipantWhereUniqueInput;
  update: ParticipantUpdateWithoutDealDataInput;
  create: ParticipantCreateWithoutDealInput;
}

export interface DealCreateOneWithoutParticipantsInput {
  create?: DealCreateWithoutParticipantsInput;
  connect?: DealWhereUniqueInput;
}

export interface ItemUpsertNestedInput {
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface DealCreateWithoutParticipantsInput {
  id?: UUID;
}

export interface ParticipantUpdateManyDataInput {
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface ParticipantUpdateWithoutUserDataInput {
  deal?: DealUpdateOneWithoutParticipantsInput;
  item?: ItemUpdateOneInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface ParticipantWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  deal?: DealWhereInput;
  user?: UserWhereInput;
  item?: ItemWhereInput;
  approval?: DealApproval;
  approval_not?: DealApproval;
  approval_in?: DealApproval[] | DealApproval;
  approval_not_in?: DealApproval[] | DealApproval;
  lastSeen?: DateTimeInput;
  lastSeen_not?: DateTimeInput;
  lastSeen_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_lt?: DateTimeInput;
  lastSeen_lte?: DateTimeInput;
  lastSeen_gt?: DateTimeInput;
  lastSeen_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ParticipantWhereInput[] | ParticipantWhereInput;
  OR?: ParticipantWhereInput[] | ParticipantWhereInput;
  NOT?: ParticipantWhereInput[] | ParticipantWhereInput;
}

export interface ParticipantUpdateManyWithoutDealInput {
  create?:
    | ParticipantCreateWithoutDealInput[]
    | ParticipantCreateWithoutDealInput;
  delete?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  connect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  set?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  disconnect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  update?:
    | ParticipantUpdateWithWhereUniqueWithoutDealInput[]
    | ParticipantUpdateWithWhereUniqueWithoutDealInput;
  upsert?:
    | ParticipantUpsertWithWhereUniqueWithoutDealInput[]
    | ParticipantUpsertWithWhereUniqueWithoutDealInput;
  deleteMany?: ParticipantScalarWhereInput[] | ParticipantScalarWhereInput;
  updateMany?:
    | ParticipantUpdateManyWithWhereNestedInput[]
    | ParticipantUpdateManyWithWhereNestedInput;
}

export interface ParticipantScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  approval?: DealApproval;
  approval_not?: DealApproval;
  approval_in?: DealApproval[] | DealApproval;
  approval_not_in?: DealApproval[] | DealApproval;
  lastSeen?: DateTimeInput;
  lastSeen_not?: DateTimeInput;
  lastSeen_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_lt?: DateTimeInput;
  lastSeen_lte?: DateTimeInput;
  lastSeen_gt?: DateTimeInput;
  lastSeen_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ParticipantScalarWhereInput[] | ParticipantScalarWhereInput;
  OR?: ParticipantScalarWhereInput[] | ParticipantScalarWhereInput;
  NOT?: ParticipantScalarWhereInput[] | ParticipantScalarWhereInput;
}

export interface ParticipantUpdateWithWhereUniqueWithoutDealInput {
  where: ParticipantWhereUniqueInput;
  data: ParticipantUpdateWithoutDealDataInput;
}

export interface DealUpdateOneWithoutParticipantsInput {
  create?: DealCreateWithoutParticipantsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DealWhereUniqueInput;
}

export interface ParticipantUpdateWithoutDealDataInput {
  user?: UserUpdateOneWithoutParticipationsInput;
  item?: ItemUpdateOneInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface DealCreateInput {
  id?: UUID;
  participants?: ParticipantCreateManyWithoutDealInput;
}

export interface ItemWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ItemWhereInput[] | ItemWhereInput;
  OR?: ItemWhereInput[] | ItemWhereInput;
  NOT?: ItemWhereInput[] | ItemWhereInput;
}

export interface ParticipantCreateWithoutDealInput {
  id?: UUID;
  user?: UserCreateOneWithoutParticipationsInput;
  item?: ItemCreateOneInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface UserUpdateWithoutParticipationsDataInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  items?: ItemUpdateManyWithoutUserInput;
}

export interface UserWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  sub?: String;
  sub_not?: String;
  sub_in?: String[] | String;
  sub_not_in?: String[] | String;
  sub_lt?: String;
  sub_lte?: String;
  sub_gt?: String;
  sub_gte?: String;
  sub_contains?: String;
  sub_not_contains?: String;
  sub_starts_with?: String;
  sub_not_starts_with?: String;
  sub_ends_with?: String;
  sub_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  items_every?: ItemWhereInput;
  items_some?: ItemWhereInput;
  items_none?: ItemWhereInput;
  participations_every?: ParticipantWhereInput;
  participations_some?: ParticipantWhereInput;
  participations_none?: ParticipantWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ItemUpdateManyWithoutUserInput {
  create?: ItemCreateWithoutUserInput[] | ItemCreateWithoutUserInput;
  delete?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  set?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  disconnect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  update?:
    | ItemUpdateWithWhereUniqueWithoutUserInput[]
    | ItemUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ItemUpsertWithWhereUniqueWithoutUserInput[]
    | ItemUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  updateMany?:
    | ItemUpdateManyWithWhereNestedInput[]
    | ItemUpdateManyWithWhereNestedInput;
}

export interface UserUpdateInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  items?: ItemUpdateManyWithoutUserInput;
  participations?: ParticipantUpdateManyWithoutUserInput;
}

export interface ItemUpdateWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutUserDataInput;
}

export interface ParticipantUpdateInput {
  deal?: DealUpdateOneWithoutParticipantsInput;
  user?: UserUpdateOneWithoutParticipationsInput;
  item?: ItemUpdateOneInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface ItemUpdateWithoutUserDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface ItemUpdateInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
  user?: UserUpdateOneWithoutItemsInput;
}

export interface ItemUpsertWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutUserDataInput;
  create: ItemCreateWithoutUserInput;
}

export interface UserUpsertWithoutItemsInput {
  update: UserUpdateWithoutItemsDataInput;
  create: UserCreateWithoutItemsInput;
}

export interface ItemScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  OR?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  NOT?: ItemScalarWhereInput[] | ItemScalarWhereInput;
}

export interface ParticipantUpdateManyWithWhereNestedInput {
  where: ParticipantScalarWhereInput;
  data: ParticipantUpdateManyDataInput;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ItemUpdateManyDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface UserCreateInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  items?: ItemCreateManyWithoutUserInput;
  participations?: ParticipantCreateManyWithoutUserInput;
}

export interface UserUpsertWithoutParticipationsInput {
  update: UserUpdateWithoutParticipationsDataInput;
  create: UserCreateWithoutParticipationsInput;
}

export type ParticipantWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface ItemUpdateOneInput {
  create?: ItemCreateInput;
  update?: ItemUpdateDataInput;
  upsert?: ItemUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ItemWhereUniqueInput;
}

export interface ParticipantUpsertWithWhereUniqueWithoutUserInput {
  where: ParticipantWhereUniqueInput;
  update: ParticipantUpdateWithoutUserDataInput;
  create: ParticipantCreateWithoutUserInput;
}

export interface ParticipantUpdateManyWithoutUserInput {
  create?:
    | ParticipantCreateWithoutUserInput[]
    | ParticipantCreateWithoutUserInput;
  delete?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  connect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  set?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  disconnect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
  update?:
    | ParticipantUpdateWithWhereUniqueWithoutUserInput[]
    | ParticipantUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ParticipantUpsertWithWhereUniqueWithoutUserInput[]
    | ParticipantUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ParticipantScalarWhereInput[] | ParticipantScalarWhereInput;
  updateMany?:
    | ParticipantUpdateManyWithWhereNestedInput[]
    | ParticipantUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithoutItemsDataInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  participations?: ParticipantUpdateManyWithoutUserInput;
}

export interface UserUpdateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput;
  update?: UserUpdateWithoutItemsDataInput;
  upsert?: UserUpsertWithoutItemsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ItemUpdateDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
  user?: UserUpdateOneWithoutItemsInput;
}

export interface ParticipantCreateManyWithoutDealInput {
  create?:
    | ParticipantCreateWithoutDealInput[]
    | ParticipantCreateWithoutDealInput;
  connect?: ParticipantWhereUniqueInput[] | ParticipantWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: UUID;
  sub?: String;
  email?: String;
}>;

export type ItemWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DealSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DealWhereInput;
  AND?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
  OR?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
  NOT?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: UUID;
  sub: String;
  email: String;
  emailVerified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateDeal {
  count: Int;
}

export interface AggregateDealPromise
  extends Promise<AggregateDeal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDealSubscription
  extends Promise<AsyncIterator<AggregateDeal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemPreviousValues {
  id: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealEdge {
  node: Deal;
  cursor: String;
}

export interface DealEdgePromise extends Promise<DealEdge>, Fragmentable {
  node: <T = DealPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DealEdgeSubscription
  extends Promise<AsyncIterator<DealEdge>>,
    Fragmentable {
  node: <T = DealSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DealConnection {
  pageInfo: PageInfo;
  edges: DealEdge[];
}

export interface DealConnectionPromise
  extends Promise<DealConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DealEdge>>() => T;
  aggregate: <T = AggregateDealPromise>() => T;
}

export interface DealConnectionSubscription
  extends Promise<AsyncIterator<DealConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DealEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDealSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ParticipantPreviousValues {
  id: UUID;
  approval?: DealApproval;
  lastSeen: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParticipantPreviousValuesPromise
  extends Promise<ParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  approval: () => Promise<DealApproval>;
  lastSeen: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<ParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  approval: () => Promise<AsyncIterator<DealApproval>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateParticipant {
  count: Int;
}

export interface AggregateParticipantPromise
  extends Promise<AggregateParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParticipantSubscription
  extends Promise<AsyncIterator<AggregateParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Item {
  id: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<UUID>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ParticipantConnection {
  pageInfo: PageInfo;
  edges: ParticipantEdge[];
}

export interface ParticipantConnectionPromise
  extends Promise<ParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ParticipantEdge>>() => T;
  aggregate: <T = AggregateParticipantPromise>() => T;
}

export interface ParticipantConnectionSubscription
  extends Promise<AsyncIterator<ParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParticipantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParticipantSubscription>() => T;
}

export interface ParticipantSubscriptionPayload {
  mutation: MutationType;
  node: Participant;
  updatedFields: String[];
  previousValues: ParticipantPreviousValues;
}

export interface ParticipantSubscriptionPayloadPromise
  extends Promise<ParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParticipantPreviousValuesPromise>() => T;
}

export interface ParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParticipantPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface User {
  id: UUID;
  sub: String;
  email: String;
  emailVerified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<UUID>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participations: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  participations: <T = Promise<AsyncIterator<ParticipantSubscription>>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Deal {
  id: UUID;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealPromise extends Promise<Deal>, Fragmentable {
  id: () => Promise<UUID>;
  participants: <T = FragmentableArray<Participant>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealSubscription
  extends Promise<AsyncIterator<Deal>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  participants: <T = Promise<AsyncIterator<ParticipantSubscription>>>(args?: {
    where?: ParticipantWhereInput;
    orderBy?: ParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ParticipantEdge {
  node: Participant;
  cursor: String;
}

export interface ParticipantEdgePromise
  extends Promise<ParticipantEdge>,
    Fragmentable {
  node: <T = ParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ParticipantEdgeSubscription
  extends Promise<AsyncIterator<ParticipantEdge>>,
    Fragmentable {
  node: <T = ParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface Participant {
  id: UUID;
  approval?: DealApproval;
  lastSeen: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ParticipantPromise extends Promise<Participant>, Fragmentable {
  id: () => Promise<UUID>;
  deal: <T = DealPromise>() => T;
  user: <T = UserPromise>() => T;
  item: <T = ItemPromise>() => T;
  approval: () => Promise<DealApproval>;
  lastSeen: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ParticipantSubscription
  extends Promise<AsyncIterator<Participant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  deal: <T = DealSubscription>() => T;
  user: <T = UserSubscription>() => T;
  item: <T = ItemSubscription>() => T;
  approval: () => Promise<AsyncIterator<DealApproval>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealPreviousValues {
  id: UUID;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealPreviousValuesPromise
  extends Promise<DealPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealPreviousValuesSubscription
  extends Promise<AsyncIterator<DealPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealSubscriptionPayload {
  mutation: MutationType;
  node: Deal;
  updatedFields: String[];
  previousValues: DealPreviousValues;
}

export interface DealSubscriptionPayloadPromise
  extends Promise<DealSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DealPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DealPreviousValuesPromise>() => T;
}

export interface DealSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DealSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DealSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DealPreviousValuesSubscription>() => T;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type UUID = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Deal",
    embedded: false
  },
  {
    name: "Participant",
    embedded: false
  },
  {
    name: "DealApproval",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
