// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  deal: (where?: DealWhereInput) => Promise<boolean>;
  dealParticipant: (where?: DealParticipantWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  deal: (where: DealWhereUniqueInput) => DealPromise;
  deals: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deal>;
  dealsConnection: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DealConnectionPromise;
  dealParticipant: (
    where: DealParticipantWhereUniqueInput
  ) => DealParticipantPromise;
  dealParticipants: (args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<DealParticipant>;
  dealParticipantsConnection: (args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DealParticipantConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemPromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDeal: (data: DealCreateInput) => DealPromise;
  updateDeal: (args: {
    data: DealUpdateInput;
    where: DealWhereUniqueInput;
  }) => DealPromise;
  upsertDeal: (args: {
    where: DealWhereUniqueInput;
    create: DealCreateInput;
    update: DealUpdateInput;
  }) => DealPromise;
  deleteDeal: (where: DealWhereUniqueInput) => DealPromise;
  deleteManyDeals: (where?: DealWhereInput) => BatchPayloadPromise;
  createDealParticipant: (
    data: DealParticipantCreateInput
  ) => DealParticipantPromise;
  updateDealParticipant: (args: {
    data: DealParticipantUpdateInput;
    where: DealParticipantWhereUniqueInput;
  }) => DealParticipantPromise;
  updateManyDealParticipants: (args: {
    data: DealParticipantUpdateManyMutationInput;
    where?: DealParticipantWhereInput;
  }) => BatchPayloadPromise;
  upsertDealParticipant: (args: {
    where: DealParticipantWhereUniqueInput;
    create: DealParticipantCreateInput;
    update: DealParticipantUpdateInput;
  }) => DealParticipantPromise;
  deleteDealParticipant: (
    where: DealParticipantWhereUniqueInput
  ) => DealParticipantPromise;
  deleteManyDealParticipants: (
    where?: DealParticipantWhereInput
  ) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  deal: (
    where?: DealSubscriptionWhereInput
  ) => DealSubscriptionPayloadSubscription;
  dealParticipant: (
    where?: DealParticipantSubscriptionWhereInput
  ) => DealParticipantSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DealApproval = "ACCEPT" | "REJECT" | "UNACKNOWLEDGED";

export type DealParticipantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "approval_ASC"
  | "approval_DESC"
  | "lastSeen_ASC"
  | "lastSeen_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "price_ASC"
  | "price_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DealOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "sub_ASC"
  | "sub_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailVerified_ASC"
  | "emailVerified_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DealParticipantUpdateManyWithoutDealInput {
  create?:
    | DealParticipantCreateWithoutDealInput[]
    | DealParticipantCreateWithoutDealInput;
  delete?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  connect?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  set?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  disconnect?:
    | DealParticipantWhereUniqueInput[]
    | DealParticipantWhereUniqueInput;
  update?:
    | DealParticipantUpdateWithWhereUniqueWithoutDealInput[]
    | DealParticipantUpdateWithWhereUniqueWithoutDealInput;
  upsert?:
    | DealParticipantUpsertWithWhereUniqueWithoutDealInput[]
    | DealParticipantUpsertWithWhereUniqueWithoutDealInput;
  deleteMany?:
    | DealParticipantScalarWhereInput[]
    | DealParticipantScalarWhereInput;
  updateMany?:
    | DealParticipantUpdateManyWithWhereNestedInput[]
    | DealParticipantUpdateManyWithWhereNestedInput;
}

export type DealWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface UserUpdateWithoutDealParticipationsDataInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  items?: ItemUpdateManyWithoutUserInput;
}

export interface UserWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  sub?: String;
  sub_not?: String;
  sub_in?: String[] | String;
  sub_not_in?: String[] | String;
  sub_lt?: String;
  sub_lte?: String;
  sub_gt?: String;
  sub_gte?: String;
  sub_contains?: String;
  sub_not_contains?: String;
  sub_starts_with?: String;
  sub_not_starts_with?: String;
  sub_ends_with?: String;
  sub_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerified?: Boolean;
  emailVerified_not?: Boolean;
  items_every?: ItemWhereInput;
  items_some?: ItemWhereInput;
  items_none?: ItemWhereInput;
  dealParticipations_every?: DealParticipantWhereInput;
  dealParticipations_some?: DealParticipantWhereInput;
  dealParticipations_none?: DealParticipantWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ItemCreateWithoutUserInput {
  id?: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
}

export interface UserUpdateWithoutItemsDataInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  dealParticipations?: DealParticipantUpdateManyWithoutParticipantInput;
}

export interface ItemCreateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
}

export interface ItemUpdateManyWithoutUserInput {
  create?: ItemCreateWithoutUserInput[] | ItemCreateWithoutUserInput;
  delete?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  set?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  disconnect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  update?:
    | ItemUpdateWithWhereUniqueWithoutUserInput[]
    | ItemUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | ItemUpsertWithWhereUniqueWithoutUserInput[]
    | ItemUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  updateMany?:
    | ItemUpdateManyWithWhereNestedInput[]
    | ItemUpdateManyWithWhereNestedInput;
}

export interface ItemCreateInput {
  id?: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  user?: UserCreateOneWithoutItemsInput;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ItemWhereInput;
  AND?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  OR?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
  NOT?: ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput;
}

export interface UserCreateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput;
  connect?: UserWhereUniqueInput;
}

export interface ItemWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ItemWhereInput[] | ItemWhereInput;
  OR?: ItemWhereInput[] | ItemWhereInput;
  NOT?: ItemWhereInput[] | ItemWhereInput;
}

export interface UserCreateWithoutItemsInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  dealParticipations?: DealParticipantCreateManyWithoutParticipantInput;
}

export interface DealWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  dealParticipants_every?: DealParticipantWhereInput;
  dealParticipants_some?: DealParticipantWhereInput;
  dealParticipants_none?: DealParticipantWhereInput;
  items_every?: ItemWhereInput;
  items_some?: ItemWhereInput;
  items_none?: ItemWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DealWhereInput[] | DealWhereInput;
  OR?: DealWhereInput[] | DealWhereInput;
  NOT?: DealWhereInput[] | DealWhereInput;
}

export interface DealParticipantCreateManyWithoutParticipantInput {
  create?:
    | DealParticipantCreateWithoutParticipantInput[]
    | DealParticipantCreateWithoutParticipantInput;
  connect?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
}

export interface UserUpdateInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
  items?: ItemUpdateManyWithoutUserInput;
  dealParticipations?: DealParticipantUpdateManyWithoutParticipantInput;
}

export interface DealParticipantCreateWithoutParticipantInput {
  id?: UUID;
  deal?: DealCreateOneWithoutDealParticipantsInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface ItemUpdateManyMutationInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface DealCreateOneWithoutDealParticipantsInput {
  create?: DealCreateWithoutDealParticipantsInput;
  connect?: DealWhereUniqueInput;
}

export interface ItemUpdateInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
  user?: UserUpdateOneWithoutItemsInput;
}

export interface DealCreateWithoutDealParticipantsInput {
  id?: UUID;
  items?: ItemCreateManyInput;
}

export interface DealParticipantUpdateInput {
  deal?: DealUpdateOneWithoutDealParticipantsInput;
  participant?: UserUpdateOneWithoutDealParticipationsInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface DealUpdateInput {
  dealParticipants?: DealParticipantUpdateManyWithoutDealInput;
  items?: ItemUpdateManyInput;
}

export interface DealParticipantCreateInput {
  id?: UUID;
  deal?: DealCreateOneWithoutDealParticipantsInput;
  participant?: UserCreateOneWithoutDealParticipationsInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface DealParticipantUpdateWithoutParticipantDataInput {
  deal?: DealUpdateOneWithoutDealParticipantsInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface UserUpsertWithoutItemsInput {
  update: UserUpdateWithoutItemsDataInput;
  create: UserCreateWithoutItemsInput;
}

export interface DealParticipantUpdateWithWhereUniqueWithoutDealInput {
  where: DealParticipantWhereUniqueInput;
  data: DealParticipantUpdateWithoutDealDataInput;
}

export interface DealParticipantWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  deal?: DealWhereInput;
  participant?: UserWhereInput;
  approval?: DealApproval;
  approval_not?: DealApproval;
  approval_in?: DealApproval[] | DealApproval;
  approval_not_in?: DealApproval[] | DealApproval;
  lastSeen?: DateTimeInput;
  lastSeen_not?: DateTimeInput;
  lastSeen_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_lt?: DateTimeInput;
  lastSeen_lte?: DateTimeInput;
  lastSeen_gt?: DateTimeInput;
  lastSeen_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DealParticipantWhereInput[] | DealParticipantWhereInput;
  OR?: DealParticipantWhereInput[] | DealParticipantWhereInput;
  NOT?: DealParticipantWhereInput[] | DealParticipantWhereInput;
}

export interface DealParticipantUpdateWithoutDealDataInput {
  participant?: UserUpdateOneWithoutDealParticipationsInput;
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface DealUpsertWithoutDealParticipantsInput {
  update: DealUpdateWithoutDealParticipantsDataInput;
  create: DealCreateWithoutDealParticipantsInput;
}

export interface UserUpdateOneWithoutDealParticipationsInput {
  create?: UserCreateWithoutDealParticipationsInput;
  update?: UserUpdateWithoutDealParticipationsDataInput;
  upsert?: UserUpsertWithoutDealParticipationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface DealUpdateOneWithoutDealParticipantsInput {
  create?: DealCreateWithoutDealParticipantsInput;
  update?: DealUpdateWithoutDealParticipantsDataInput;
  upsert?: DealUpsertWithoutDealParticipantsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DealWhereUniqueInput;
}

export interface DealParticipantUpdateWithWhereUniqueWithoutParticipantInput {
  where: DealParticipantWhereUniqueInput;
  data: DealParticipantUpdateWithoutParticipantDataInput;
}

export interface DealCreateInput {
  id?: UUID;
  dealParticipants?: DealParticipantCreateManyWithoutDealInput;
  items?: ItemCreateManyInput;
}

export interface DealParticipantUpdateManyWithoutParticipantInput {
  create?:
    | DealParticipantCreateWithoutParticipantInput[]
    | DealParticipantCreateWithoutParticipantInput;
  delete?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  connect?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  set?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
  disconnect?:
    | DealParticipantWhereUniqueInput[]
    | DealParticipantWhereUniqueInput;
  update?:
    | DealParticipantUpdateWithWhereUniqueWithoutParticipantInput[]
    | DealParticipantUpdateWithWhereUniqueWithoutParticipantInput;
  upsert?:
    | DealParticipantUpsertWithWhereUniqueWithoutParticipantInput[]
    | DealParticipantUpsertWithWhereUniqueWithoutParticipantInput;
  deleteMany?:
    | DealParticipantScalarWhereInput[]
    | DealParticipantScalarWhereInput;
  updateMany?:
    | DealParticipantUpdateManyWithWhereNestedInput[]
    | DealParticipantUpdateManyWithWhereNestedInput;
}

export interface DealParticipantCreateWithoutDealInput {
  id?: UUID;
  participant?: UserCreateOneWithoutDealParticipationsInput;
  approval?: DealApproval;
  lastSeen: DateTimeInput;
}

export interface ItemUpdateWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutUserDataInput;
}

export interface UserCreateWithoutDealParticipationsInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  items?: ItemCreateManyWithoutUserInput;
}

export interface ItemUpdateWithoutUserDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ItemUpsertWithWhereUniqueWithoutUserInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutUserDataInput;
  create: ItemCreateWithoutUserInput;
}

export interface DealSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DealWhereInput;
  AND?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
  OR?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
  NOT?: DealSubscriptionWhereInput[] | DealSubscriptionWhereInput;
}

export interface ItemScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  OR?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  NOT?: ItemScalarWhereInput[] | ItemScalarWhereInput;
}

export interface UserCreateInput {
  id?: UUID;
  sub: String;
  email: String;
  emailVerified?: Boolean;
  items?: ItemCreateManyWithoutUserInput;
  dealParticipations?: DealParticipantCreateManyWithoutParticipantInput;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface DealParticipantUpdateManyMutationInput {
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export interface ItemUpdateManyDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface UserUpsertWithoutDealParticipationsInput {
  update: UserUpdateWithoutDealParticipationsDataInput;
  create: UserCreateWithoutDealParticipationsInput;
}

export interface DealParticipantUpsertWithWhereUniqueWithoutParticipantInput {
  where: DealParticipantWhereUniqueInput;
  update: DealParticipantUpdateWithoutParticipantDataInput;
  create: DealParticipantCreateWithoutParticipantInput;
}

export interface DealParticipantUpsertWithWhereUniqueWithoutDealInput {
  where: DealParticipantWhereUniqueInput;
  update: DealParticipantUpdateWithoutDealDataInput;
  create: DealParticipantCreateWithoutDealInput;
}

export interface UserCreateOneWithoutDealParticipationsInput {
  create?: UserCreateWithoutDealParticipationsInput;
  connect?: UserWhereUniqueInput;
}

export interface DealParticipantScalarWhereInput {
  id?: UUID;
  id_not?: UUID;
  id_in?: UUID[] | UUID;
  id_not_in?: UUID[] | UUID;
  id_lt?: UUID;
  id_lte?: UUID;
  id_gt?: UUID;
  id_gte?: UUID;
  id_contains?: UUID;
  id_not_contains?: UUID;
  id_starts_with?: UUID;
  id_not_starts_with?: UUID;
  id_ends_with?: UUID;
  id_not_ends_with?: UUID;
  approval?: DealApproval;
  approval_not?: DealApproval;
  approval_in?: DealApproval[] | DealApproval;
  approval_not_in?: DealApproval[] | DealApproval;
  lastSeen?: DateTimeInput;
  lastSeen_not?: DateTimeInput;
  lastSeen_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_not_in?: DateTimeInput[] | DateTimeInput;
  lastSeen_lt?: DateTimeInput;
  lastSeen_lte?: DateTimeInput;
  lastSeen_gt?: DateTimeInput;
  lastSeen_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DealParticipantScalarWhereInput[] | DealParticipantScalarWhereInput;
  OR?: DealParticipantScalarWhereInput[] | DealParticipantScalarWhereInput;
  NOT?: DealParticipantScalarWhereInput[] | DealParticipantScalarWhereInput;
}

export interface DealParticipantSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DealParticipantWhereInput;
  AND?:
    | DealParticipantSubscriptionWhereInput[]
    | DealParticipantSubscriptionWhereInput;
  OR?:
    | DealParticipantSubscriptionWhereInput[]
    | DealParticipantSubscriptionWhereInput;
  NOT?:
    | DealParticipantSubscriptionWhereInput[]
    | DealParticipantSubscriptionWhereInput;
}

export interface DealParticipantUpdateManyWithWhereNestedInput {
  where: DealParticipantScalarWhereInput;
  data: DealParticipantUpdateManyDataInput;
}

export type DealParticipantWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface DealParticipantUpdateManyDataInput {
  approval?: DealApproval;
  lastSeen?: DateTimeInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: UUID;
  sub?: String;
  email?: String;
}>;

export interface UserUpdateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput;
  update?: UserUpdateWithoutItemsDataInput;
  upsert?: UserUpsertWithoutItemsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ItemUpdateDataInput {
  title?: String;
  description?: String;
  price?: Int;
  image?: String;
  largeImage?: String;
  user?: UserUpdateOneWithoutItemsInput;
}

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateManyInput {
  create?: ItemCreateInput[] | ItemCreateInput;
  update?:
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput;
  delete?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  set?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  disconnect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
  deleteMany?: ItemScalarWhereInput[] | ItemScalarWhereInput;
  updateMany?:
    | ItemUpdateManyWithWhereNestedInput[]
    | ItemUpdateManyWithWhereNestedInput;
}

export interface DealUpdateWithoutDealParticipantsDataInput {
  items?: ItemUpdateManyInput;
}

export type ItemWhereUniqueInput = AtLeastOne<{
  id: UUID;
}>;

export interface UserUpdateManyMutationInput {
  sub?: String;
  email?: String;
  emailVerified?: Boolean;
}

export interface ItemCreateManyWithoutUserInput {
  create?: ItemCreateWithoutUserInput[] | ItemCreateWithoutUserInput;
  connect?: ItemWhereUniqueInput[] | ItemWhereUniqueInput;
}

export interface DealParticipantCreateManyWithoutDealInput {
  create?:
    | DealParticipantCreateWithoutDealInput[]
    | DealParticipantCreateWithoutDealInput;
  connect?: DealParticipantWhereUniqueInput[] | DealParticipantWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: UUID;
  sub: String;
  email: String;
  emailVerified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealParticipantEdge {
  node: DealParticipant;
  cursor: String;
}

export interface DealParticipantEdgePromise
  extends Promise<DealParticipantEdge>,
    Fragmentable {
  node: <T = DealParticipantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DealParticipantEdgeSubscription
  extends Promise<AsyncIterator<DealParticipantEdge>>,
    Fragmentable {
  node: <T = DealParticipantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DealParticipantPreviousValues {
  id: UUID;
  approval?: DealApproval;
  lastSeen: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealParticipantPreviousValuesPromise
  extends Promise<DealParticipantPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  approval: () => Promise<DealApproval>;
  lastSeen: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealParticipantPreviousValuesSubscription
  extends Promise<AsyncIterator<DealParticipantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  approval: () => Promise<AsyncIterator<DealApproval>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealParticipantConnection {
  pageInfo: PageInfo;
  edges: DealParticipantEdge[];
}

export interface DealParticipantConnectionPromise
  extends Promise<DealParticipantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DealParticipantEdge>>() => T;
  aggregate: <T = AggregateDealParticipantPromise>() => T;
}

export interface DealParticipantConnectionSubscription
  extends Promise<AsyncIterator<DealParticipantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DealParticipantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDealParticipantSubscription>() => T;
}

export interface DealEdge {
  node: Deal;
  cursor: String;
}

export interface DealEdgePromise extends Promise<DealEdge>, Fragmentable {
  node: <T = DealPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DealEdgeSubscription
  extends Promise<AsyncIterator<DealEdge>>,
    Fragmentable {
  node: <T = DealSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeal {
  count: Int;
}

export interface AggregateDealPromise
  extends Promise<AggregateDeal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDealSubscription
  extends Promise<AsyncIterator<AggregateDeal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemPreviousValues {
  id: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealParticipant {
  id: UUID;
  approval?: DealApproval;
  lastSeen: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealParticipantPromise
  extends Promise<DealParticipant>,
    Fragmentable {
  id: () => Promise<UUID>;
  deal: <T = DealPromise>() => T;
  participant: <T = UserPromise>() => T;
  approval: () => Promise<DealApproval>;
  lastSeen: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealParticipantSubscription
  extends Promise<AsyncIterator<DealParticipant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  deal: <T = DealSubscription>() => T;
  participant: <T = UserSubscription>() => T;
  approval: () => Promise<AsyncIterator<DealApproval>>;
  lastSeen: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DealConnection {
  pageInfo: PageInfo;
  edges: DealEdge[];
}

export interface DealConnectionPromise
  extends Promise<DealConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DealEdge>>() => T;
  aggregate: <T = AggregateDealPromise>() => T;
}

export interface DealConnectionSubscription
  extends Promise<AsyncIterator<DealConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DealEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDealSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Item {
  id: UUID;
  title: String;
  description: String;
  price: Int;
  image: String;
  largeImage: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<UUID>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  price: () => Promise<Int>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface Deal {
  id: UUID;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealPromise extends Promise<Deal>, Fragmentable {
  id: () => Promise<UUID>;
  dealParticipants: <T = FragmentableArray<DealParticipant>>(args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealSubscription
  extends Promise<AsyncIterator<Deal>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  dealParticipants: <
    T = Promise<AsyncIterator<DealParticipantSubscription>>
  >(args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface DealParticipantSubscriptionPayload {
  mutation: MutationType;
  node: DealParticipant;
  updatedFields: String[];
  previousValues: DealParticipantPreviousValues;
}

export interface DealParticipantSubscriptionPayloadPromise
  extends Promise<DealParticipantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DealParticipantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DealParticipantPreviousValuesPromise>() => T;
}

export interface DealParticipantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DealParticipantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DealParticipantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DealParticipantPreviousValuesSubscription>() => T;
}

export interface User {
  id: UUID;
  sub: String;
  email: String;
  emailVerified: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<UUID>;
  sub: () => Promise<String>;
  email: () => Promise<String>;
  emailVerified: () => Promise<Boolean>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dealParticipations: <T = FragmentableArray<DealParticipant>>(args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  sub: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerified: () => Promise<AsyncIterator<Boolean>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  dealParticipations: <
    T = Promise<AsyncIterator<DealParticipantSubscription>>
  >(args?: {
    where?: DealParticipantWhereInput;
    orderBy?: DealParticipantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealPreviousValues {
  id: UUID;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DealPreviousValuesPromise
  extends Promise<DealPreviousValues>,
    Fragmentable {
  id: () => Promise<UUID>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DealPreviousValuesSubscription
  extends Promise<AsyncIterator<DealPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<UUID>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealSubscriptionPayload {
  mutation: MutationType;
  node: Deal;
  updatedFields: String[];
  previousValues: DealPreviousValues;
}

export interface DealSubscriptionPayloadPromise
  extends Promise<DealSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DealPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DealPreviousValuesPromise>() => T;
}

export interface DealSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DealSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DealSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DealPreviousValuesSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateDealParticipant {
  count: Int;
}

export interface AggregateDealParticipantPromise
  extends Promise<AggregateDealParticipant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDealParticipantSubscription
  extends Promise<AsyncIterator<AggregateDealParticipant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type UUID = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Deal",
    embedded: false
  },
  {
    name: "DealParticipant",
    embedded: false
  },
  {
    name: "DealApproval",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
